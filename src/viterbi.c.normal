#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
const float EPSILON = 1.0;
#define MAX 600
int cache[MAX+1][MAX+1];

int c_ncr(int n,int r) {
	if(cache[n][r]==-1)
	cache[n][r] = c_ncr(n-1,r)+c_ncr(n-1,r-1);
	return cache[n][r];
}

int ncr(int n,int r) {
	int i,j;
	for(i=0;i<=n;i++) {
		for(j=0;j<=n;j++) {
			cache[i][j]=-1;
		}
	}

	for(i=1;i<=n;i++) { //  initialize the cache
		cache[i][0]=1;
		cache[i][i]=1;
	}
	return c_ncr(n,r);
}
static int fact(int z) {
    int f = 1;
    if (z == 0) {
      return f;
    }
    else {
        for (int i = 1; i <= z; i++) {
            f = f * i;
        }
    }
    return f;
}
/*
static int ncr(int n, int r) {
    return fact(n) / (fact(r) * fact(n - r));
}*/

static int cal_m(int *o, int n) {
    int max = o[0];
    for (int i = 1; i < n; i++) {
        if (o[i] > max) {
            max = o[i];
        }
    }
    return max + 1;
}

static float cal_init_prop(int m, int n, int k) {
    return ncr(m - k + n - 1, n - 1) / (float)ncr(m + n, n);
}

static float (*pi_k)(int m, int n, int k) = cal_init_prop;

static float cal_trans_prop_cache_lvy(int m, int n, int i, int j, int t, float **cache) {
    if (i > j) {
        return 0;
    }
    else if (cache[i][j] > 0.0000001) {
        return cache[i][j];
    }
    else if (i == j) {
        cache[i][j] = (n - t) / (float)(m - i + n - t);
    }
    else {
        cache[i][j] = (cal_trans_prop_cache_lvy(m, n, i, j - 1, t, cache) * (m - j + 1) / (float)(m - j + n - t));
    }
    return cache[i][j];
}

static float cal_trans_prop_cache(int m, int n, int i, int j, int t) {
    static float **trans_prop_cache;
    static int cached_t;
    if (!trans_prop_cache) {
        trans_prop_cache = malloc(sizeof(float*) * (m + 1));
        for (int ii = 0; ii <= m; ii++) {
            trans_prop_cache[ii] = malloc(sizeof(float) * (m + 1));
            memset(trans_prop_cache[ii], 0, sizeof(float) * (m + 1));
        }
        cached_t = t;
    }

    if (cached_t != t) {
        for (int ii = 0; ii <= m; ii++) {
          free(trans_prop_cache[ii]);
        } 
        free(trans_prop_cache);
        trans_prop_cache = malloc(sizeof(float*) * (m + 1));
        for (int ii = 0; ii <= m; ii++) {
            trans_prop_cache[ii] = malloc(sizeof(float) * (m + 1));
            memset(trans_prop_cache[ii], 0, sizeof(float) * (m + 1));
        }
        cached_t = t;
    }

    return cal_trans_prop_cache_lvy(m, n, i, j, t, trans_prop_cache);
}

static float cal_trans_prop(int m, int n, int i, int j, int t) {
    //return ncr(m -j + n - t - 1, n - t -  1) / (float)ncr(m - i + n - t, n - t);
    if (i > j) {
        return 0;
    }
    else if (i == j) {
        return (n - t) / (float)(m - i + n - t);
    }
    else {
        return cal_trans_prop(m, n, i, j - 1, t) * (m - j + 1) / (float)(m - j + n - t);
    }
}

static float (*a_i_j_t)(int m, int n, int i, int j, int t) = cal_trans_prop_cache;

static float cal_emision_prop(int *o, int t, int j) {
    return EPSILON / 2 * exp(-EPSILON * abs(o[t] - j));
}

static float (*bj)(int *o, int t, int j) = cal_emision_prop;

static float maximum(float a[], float n) {
    int c, max, index;
 
    max = a[0];
    index = 0;
 
    for (c = 1; c < n; c++) {
      if (a[c] > max) {
         index = c;
         max = a[c];
      }
    }
 
  return a[index];
}


void viterbi(int o[], int q_star[], int n) {
    /* initilization */
    int m = cal_m(o, n);
    float delta[n][m + 1];
    int psi[n][m + 1];
    
    for (int i = 0; i <= m; i++) {
        delta[0][i] = pi_k(m, n, i) * bj(o, 0, i);
        psi[0][i] = 0;
    }

    /* recursion */
    for (int t = 1; t < n; t++) {
        for (int j = 0; j <= m; j++) {
            delta[t][j] = delta[t - 1][j] * a_i_j_t(m, n, 0, j, t);
            psi[t][j] = 0;
            for (int i = 0; i <= m; i++) {
                if (delta[t - 1][i] * a_i_j_t(m, n, i, j, t) >  delta[t][j]) {
                    delta[t][j] = delta[t - 1][i] * a_i_j_t(m, n, i, j, t);
                    psi[t][j] = i;
                }
            }
            delta[t][j] *= bj(o, t, j);
        }
    }
 
    for (int t = 0; t < n; t++) {
        for (int i = 0; i <= m; i++) {
          printf("delta[%d][%d]=%f,psi[%d][%d]=%d\n", t, i, delta[t][i], t, i, psi[t][i]);
        }
    }
    /* termination */
    {
        float p_star = delta[n - 1][0];
        for (int i = 1; i <= m; i++) {
            if (delta[n - i][i] > p_star) {
                p_star = delta[n - 1][i];
                q_star[n - 1] = i;
            }
        }
    }
    
    /* backstrace*/
    for (int t = n - 2; t >= 0; t--) {
        q_star[t] = psi[t + 1][q_star[t + 1]];
    }
    return;
}

int main() {
  int o[] = {2, 1, 3};
  // int o[] = {5, 4, 3, 2, 1};
  int n = sizeof(o) / sizeof(int);
  int q_star[n];
  memset(q_star, 0, sizeof(q_star));
  viterbi(o, q_star, n);

  for (int i = 0; i < n; i++) {
      printf(">%d: %d\n", i, q_star[i]);
  }
  return 0;
}
